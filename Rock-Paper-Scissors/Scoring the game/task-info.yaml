type: edu
files:
- name: src/rockpaperscissors/Main.java
  visible: true
  text: |
    package rockpaperscissors;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;

    public class Tests extends StageTest<String> {
        String[] cases = new String[]{"rock",
                "paper",
                "scissors"};
        int loses = 0;
        int wins = 0;
        int draws = 0;
        String fileName = "rating.txt";
        int startScore = 350;
        String userName = "Bob";

        CheckResult checkInvalidInput(String reply, String attach) {
            if (!reply.toLowerCase().contains("invalid"))
                return CheckResult.wrong("Looks like your program doesn't handle invalid inputs correctly.\n" +
                        "You should print 'Invalid input' if the input can't be processed.");
            return CheckResult.correct();
        }

        CheckResult checkValidInputs(String reply, String attach) {
            int results = 0;
            int attachInt = Integer.parseInt(attach);
            for (String s : reply.toLowerCase().split("\n")) {
                if (s.contains("sorry"))
                    results++;
                if (s.contains("draw"))
                    results++;
                if (s.contains("well done"))
                    results++;
            }
            if (results != attachInt) {
                return CheckResult.wrong(String.format(
                        "Not enough results of the games were printed!\n" +
                                "Tried to input %s actions and got %s results of the games.\n" +
                                "Perhaps your program did not run enough games. " +
                                "Is it set up correctly to loop until the user inputs ‘!exit’? \n" +
                                "Also, make sure you print the result  " +
                                "of the game in the correct format after each valid input!",
                        attach, results));
            }
            return CheckResult.correct();
        }

        CheckResult checkResults(String reply, String attach) {
            for (String s : reply.toLowerCase().split("\n")) {
                if (s.contains("sorry"))
                    loses++;
                else if (s.contains("draw"))
                    draws++;
                else if (s.contains("well done"))
                    wins++;
            }
            CheckResult wrongRandomize = CheckResult.wrong(String.format(
                    "The results of the games: %s wins, %s draws and %s loses\n" +
                            "The game is too easy to win. Is the computer being too predictable? " +
                            "The number of wins, draws and loses should be approximately the same.\n" +
                            "Perhaps you don't use the random module to choose random option.\n" +
                            "Also, make sure you output the results of the games " +
                            "the same way as was stated in the examples!\n" +
                            "If you are sure that you use the random module, try to rerun the tests!\n",
                    wins, draws, loses));

            if (loses < 20)
                return wrongRandomize;
            if (draws < 20)
                return wrongRandomize;
            if (wins < 20)
                return wrongRandomize;

            return CheckResult.correct();

        }

        public List<TestCase<String>> generate() {
            String[] validInputCases = {String.format(
                    "%s\nrock\npaper\nscissors\npaper\nscissors\nrock\npaper\nscissors\n!exit", userName),
                    String.format("%s\nscissors\nscissors\nscissors\n!exit", userName)};
            String[] invalidInputCases = {String.format("%s\nrock\npaper\npaper\nscissors\nblabla\n!exit", userName),
                    String.format("%s\nrock\ninvalid\n!exit", userName),
                    String.format("%s\nrock\nrock\nrock\nrock-n-roll\n!exit", userName)};
            List<TestCase<String>> tests = new ArrayList<>();
            //Cases that checks multiple input
            for (String input : validInputCases) {
                TestCase<String> testCase = new TestCase<>();
                testCase.setCheckFunc(this::checkValidInputs);
                testCase.setAttach(String.valueOf(input.split("\n").length - 2));
                testCase.setInput(input);
                testCase.addFile(fileName, String.format("%s %s\nJane 200\nAlex 400", userName, startScore));
                tests.add(testCase);
            }
            //Cases that check invalid input
            for (String input : invalidInputCases) {
                TestCase<String> testCase = new TestCase<>();
                testCase.setCheckFunc(this::checkInvalidInput);
                testCase.setInput(input);
                testCase.addFile(fileName, String.format("%s %s\nJane 200\nAlex 400", userName, startScore));
                tests.add(testCase);
            }
            //Cases that check using random module
            String longInput = String.format("%s\n", userName) + "rock\n".repeat(100) +
                    "!exit";
            TestCase<String> testCase = new TestCase<>();
            testCase.setCheckFunc(this::checkResults);
            testCase.setAttach("rock");
            testCase.setInput(longInput);
            testCase.addFile(fileName, String.format("%s %s\nJane 200\nAlex 400", userName, startScore));
            tests.add(testCase);
            //Case that checks prints in file
            String[] temp = longInput.split("\n");
            temp[temp.length - 2] = "!rating";
            StringBuilder sb = new StringBuilder();
            for (String t : temp) {
                sb.append(t);
                sb.append("\n");
            }
            longInput = sb.toString();
            testCase = new TestCase<>();
            testCase.setCheckFunc(this::checkFile);
            testCase.setAttach("rock");
            testCase.setInput(longInput);
            testCase.addFile(fileName, String.format("%s %s\nJane 200\nAlex 400", userName, startScore));
            tests.add(testCase);
            return tests;

        }

        CheckResult checkFile(String reply, String attach) {
            if (!reply.toLowerCase().contains("enter your name"))
                return CheckResult.wrong(
                        "Seems like you did not offer the user to input their name. " +
                                "Your program should output \"Enter your name:\" before the start of the game.\n");
            if (!reply.toLowerCase().contains(String.format("hello, %s", userName).toLowerCase()))
                return CheckResult.wrong(
                        "Seems like you did not greet the user. " +
                                "Your program should output \"Hello, <user_name>\"\n");
            for (String line : reply.split("\n")) {
                String lowerLine = line.toLowerCase();
                if (lowerLine.contains("well done") && !lowerLine.contains("scissors"))
                    return CheckResult.wrong(String.format(
                            "Wrong result of the game:\n> rock\n%s\nRock can only beat scissors!", line));
                else if (lowerLine.contains("draw") && !lowerLine.contains("rock"))
                    return CheckResult.wrong(String.format(
                            "Wrong result of the game:\n> rock\n%s\n" +
                                    "The game ends with a draw only when user option and computer choose the same option",
                            line));
                else if (lowerLine.contains("sorry") && !lowerLine.contains("paper"))
                    return CheckResult.wrong(String.format(
                            "Wrong result of the game:\n> " +
                                    "rock\n%s\nOnly paper can beat rock!", line));
            }
            draws = 0;
            loses = 0;
            wins = 0;
            for (String s : reply.toLowerCase().split("\n")) {
                if (s.contains("sorry")) {
                    loses++;
                } else if (s.contains("draw")) {
                    draws++;
                } else if (s.contains("well done"))
                    wins++;
            }
            int correctPoints = startScore + wins * 100 + draws * 50;
            if (!reply.contains(String.valueOf(correctPoints)))
                return CheckResult.wrong("Looks like you incorrectly calculated the player's score!\n" +
                        "Make sure that you took into account the user's initial score written in the file.\n" +
                        "For each draw, add 50 point to the score. For each user's win, add 100 to his/her score.\n" +
                        "In case the user loses, don't change the score. ");
            return CheckResult.correct();

        }
    }
  learner_created: false
- name: src/rockpaperscissors/rating.txt
  visible: true
  text: |-
    Tim 350
    Jane 200
    Alex 400
  learner_created: true
- name: src/rockpaperscissors/Gesture.java
  visible: true
  text: |
    package rockpaperscissors;

    public enum Gesture {
        SCISSORS("scissors", "rock", "paper"),
        ROCK("rock", "paper", "scissors"),
        PAPER("paper", "scissors", "rock");

        private String name;
        private String losesAgainst;
        private String winsAgainst;

        Gesture (String name, String loses, String beats){
            this.name = name;
            this.losesAgainst = loses;
            this.winsAgainst = beats;
        }

        public String getName() {
            return name;
        }

        public String getLosesAgainst() {
            return losesAgainst;
        }

        public String getWinsAgainst() {
            return winsAgainst;
        }

        public static Gesture fromString(String name) {
            for (Gesture gesture: Gesture.values()) {
                if (gesture.name.equals(name)) {
                    return gesture;
                }
            }
            //throw new IllegalArgumentException("No gesture found with the name " + name + ".");
            throw new IllegalArgumentException("Invalid input");
        }


    }
  learner_created: true
- name: src/rockpaperscissors/Handler.java
  visible: true
  text: |
    package rockpaperscissors;

    import java.io.*;
    import java.nio.file.Path;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.Scanner;

    import static rockpaperscissors.Gesture.*;

    public class Handler {

        final static int WIN_POINTS = 100;
        final static int DRAW_POINTS = 50;

        public static String greetUser(){
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter your name: ");
            String userName = scanner.nextLine();
            System.out.printf("Hello, %s%n", userName);
            return userName.trim();
        }

        public static User findUser(String name) {

            Path path = Path.of("rating.txt");
            User[] users = Handler.getUsersFromFile(path);

            boolean isFound = false;
            for (User user : users) {
                if (user.getName().equals(name)) {
                    isFound = true;
                    return user;
                }
            }
            if (!isFound) {
                try {
                    return createUser(name, path);
                } catch (IOException e) {
                    System.out.println(e.getMessage());
                }
            }
            return null;
        }

        public static String chooseTurnResult() {
            Random random = new Random();
            int rndNumber = random.nextInt(3);
            String turnResult = rndNumber == 0  ? "DRAW" : rndNumber == 1 ? "WIN" : "LOSS";
            return turnResult;
        }

        public static void outputLineResult(String userInput, User currentUser) {

            try{
                Gesture chosenGesture = Gesture.fromString(userInput);
                String matchResult = chooseTurnResult();

                // Points management
                int earnedPoints = 0;
                if (matchResult.equals("WIN")) {
                    earnedPoints = WIN_POINTS;
                } else if (matchResult.equals("DRAW")) {
                    earnedPoints = DRAW_POINTS;
                }
                if (earnedPoints !=0) {
                    currentUser.setRating(earnedPoints);
                }

                String message = "";
                switch (chosenGesture) {
                    case SCISSORS -> {
                        if (matchResult.equals("LOSS")) {
                            message = "Sorry, but the computer chose " + SCISSORS.getLosesAgainst();
                        } else if (matchResult.equals("WIN")) {
                            message = "Well done. The computer chose " + SCISSORS.getWinsAgainst() + " and failed";
                        } else {
                            message = "There is a draw (" + chosenGesture.getName() + ")";
                        }
                    }
                    case ROCK -> {
                        if (matchResult.equals("LOSS")) {
                            message = "Sorry, but the computer chose " + ROCK.getLosesAgainst();
                        } else if (matchResult.equals("WIN")) {
                            message = "Well done. The computer chose " + ROCK.getWinsAgainst() + " and failed";
                        } else {
                            message = "There is a draw (" + chosenGesture.getName() + ")";
                        }
                    }
                    case PAPER -> {
                        if (matchResult.equals("LOSS")) {
                            message = "Sorry, but the computer chose " + PAPER.getLosesAgainst();
                        } else if (matchResult.equals("WIN")) {
                            message = "Well done. The computer chose " + PAPER.getWinsAgainst() + " and failed";
                        } else {
                            message = "There is a draw (" + chosenGesture.getName() + ")";
                        }
                    }
                }

                System.out.println(message);

            } catch(IllegalArgumentException | FileNotFoundException e) {
                System.out.println(e.getMessage());
            }
        }

        public static String takeUserInput(){
            Scanner scanner = new Scanner(System.in);
            return scanner.nextLine();
        }

        public static User createUser(String name, Path path) throws IllegalArgumentException, IOException {
            if (name == null || name.isEmpty()) {
                throw new IllegalArgumentException("Name cannot be null or empty");
            }
            User user = new User(name, 0);
            addNewUserToFile(path, name, 0);
            return user;
        }

        private static void addNewUserToFile(Path path, String name, int rating) throws IOException {
            //File file = new File(pathFileName);
            File file = path.toFile();
            FileWriter writer = new FileWriter(file, true);
            writer.write("\n" + name + " " + rating);
            writer.close();
        }

        public static User[] getUsersFromFile(Path path) {
            List<User> userList = new ArrayList<>();

            //File file = new File(fileName);
            File file = path.toFile();
            try(Scanner scanner = new Scanner(file)) {

                while (scanner.hasNextLine()) {
                    String[] parts = scanner.nextLine().split(" ");
                    String name = parts[0];
                    int rating = Integer.parseInt(parts[1]);
                    userList.add(new User(name, rating));
                }

            } catch (FileNotFoundException e) {
                System.out.println("No file found: " + path.toString());
            }

            // Convert the list to an array and return it
            return userList.toArray(new User[userList.size()]);
        }

    }
  learner_created: true
- name: src/rockpaperscissors/User.java
  visible: true
  text: |
    package rockpaperscissors;

    import java.io.*;
    import java.nio.file.Path;
    import java.util.Scanner;

    public class User {

        private String name;
        private int rating;

        public User(String name, int rating) {
            this.name = name;
            this.rating = rating;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getRating() {
            return rating;
        }

        public void setRating(int earnedPoints) throws FileNotFoundException {
            this.rating = this.getRating() + earnedPoints;

            Path pathInputFile = Path.of("rating.txt");
            Path pathTempFile = Path.of("temp.txt");
            //String fileName = "Rock-Paper-Scissors/task/src/rockpaperscissors/rating.txt";

            File inputFile = pathInputFile.toFile();
            File tempFile = pathTempFile.toFile();
            //File inputFile = new File(fileName);
            //File tempFile = new File("Rock-Paper-Scissors/task/src/rockpaperscissors/temp.txt");


            try {
                BufferedReader reader = new BufferedReader(new FileReader(inputFile));
                BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));
                String currentLine;
                int count = 0;
                while ((currentLine = reader.readLine()) != null) {
                    String[] parts = currentLine.split(" ");
                    String username = parts[0];
                    if (username.equals(this.name)) {
                        currentLine = username + " " + this.rating;
                    }
                    writer.write(count != 0 ? System.getProperty("line.separator") : "");
                    writer.write(currentLine);
                    count++;
                }
                reader.close();
                writer.close();
                inputFile.delete();
                tempFile.renameTo(inputFile);
            } catch (IOException e) {
                e.printStackTrace();
            }







        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/24618#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 18 Feb 2023 00:11:03 UTC"
record: 4
